#!/bin/bash

# PARADIGM-PROXY 0.1
# Establishes and checks proxy for bittorrent sync

# Copyright 2014 Neil Scudder neil@neilscudder.com
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


readonly PROGNAME=$(basename $0)
readonly PROGDIR=$(readlink -m $(dirname $0))
readonly ARGS="$@"
readonly PLAYNODE="$1"
# Server URL and credentials:
readonly CONTROLUSER="$2"
readonly CONTROLPASS="$3"
readonly CONTROLSERVER="$4"
# Playnode needs to reach out over this port
# and the server needs to be listening on it:
# STATEFUL firewalls must open this port to $CONTROLSERVER
readonly SERVERLISTENINGPORT=42
# SSH port must match /etc/ssh/sshd_config
readonly CLIENTSSHPORT=22
# MPD port must match configuration in /var/lib/mpd/mpd.conf
readonly CLIENTMPDPORT=6600
# Proxy port should match in /etc/btsync/paradigm configuration file
readonly CLIENTPROXYPORT=3002

# TODO check for SSHPASS dependency

main() {
    tunnelCheck Proxy
}

tunnelCheck() {
    local tunnelName=$1
    local pidFile=/tmp/paradigm-${tunnelName}.pid
        if [ -f ${pidFile} ]; then
                echo "$(date) - II - Pid file found for ${tunnelName}"
                local pid=$(cat ${pidFile})
                if kill -0 $pid > /dev/null 2>&1; then
                        echo "$(date) - II - Tunnel ${pid} found running (${tunnelName})."
                else
                        echo "$(date) - EE - Tunnel ${pid} not found in process list (${tunnelName})."
                        rm ${pidFile}
                        initTunnel ${tunnelName} ${pidFile}
                fi
        else
                echo "$(date) - WW - Pid file not found for ${tunnelName}."
                initTunnel ${tunnelName} ${pidFile}
        fi
}

initTunnel() {
    local tunnelName=$1
    local pidFile=$2
    echo "$(date) - II - initTunnel ${tunnelName}."
    local portCmd="cat 'portalias-${tunnelName}' | grep '^${PLAYNODE}' | /usr/bin/cut -d^ -f2"
    case ${tunnelName} in
        Proxy)
            /usr/bin/sshpass \
            -p${CONTROLPASS} \
                /usr/bin/ssh \
                -q \
                -p ${SERVERLISTENINGPORT} \
                -o StrictHostKeyChecking=no \
                -o ServerAliveCountMax=2 \
                -o ControlMaster=no \
                -o ExitOnForwardFailure=yes \
                -o TCPKeepAlive=yes \
                -o ServerAliveInterval=45 \
                -N \
                -D ${CLIENTPROXYPORT} \
                ${CONTROLUSER}@${CONTROLSERVER} & \
                echo $! > ${pidFile} &
        ;;
    esac
}

main # Call the main function once to start

exit 0

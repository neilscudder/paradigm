#!/bin/sh
# PARADIGM 0.5.2 Copyright 2014 neil@neilscudder.com
# You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.


main() {
  local pidFile=/tmp/paradigm-${SERVICENAME}.pid
  if [ -f ${pidFile} ]; then
    logIt I "${pidFile} found."
    local pid=$(cat ${pidFile})
    if kill -0 $pid > /dev/null 2>&1; then
      logIt I "Tunnel ${pid} found running (${SERVICENAME})."
    else
      logIt E "Tunnel ${pid} not found in process list (${SERVICENAME})."
      rm ${pidFile}
      if [ $PROXYMODE -eq 1 ]; then
        establishProxy "${pidFile}"
      else
        portalias=$(getPortalias ${pidFile})
        establishTunnel ${portalias} "${pidFile}"
      fi
    fi
  else
    if [ $PROXYMODE -eq 1 ]; then
      establishProxy "${pidFile}"
    else
      logIt W "${pidFile} not found for ${SERVICENAME}."
      portalias=$(getPortalias ${pidFile})
      establishTunnel ${portalias} "${pidFile}"
    fi
  fi
}


logIt(){
  tester 2 $# $FUNCNAME
  case $1 in
    I)
      echo "$(date) ${PLAYNODE} - II - ${2}" >> $LOGFILE
    ;;
    W)
      echo "$(date) ${PLAYNODE} - WW - ${2}" >> $LOGFILE
    ;;
    E)
      echo "$(date) ${PLAYNODE} - EE - ${2}" >> $LOGFILE
    ;;
  esac
}


getPortalias() {
  tester 1 $# $FUNCNAME
  local pidFile=$1
  logIt I "getPortalias ${SERVICENAME}."
  local portCmd="cat 'portalias-${SERVICENAME}' | grep '^${PLAYNODE}' | /usr/bin/cut -d^ -f2"
  local portalias=$(
    /usr/bin/ssh \
    -q \
    -p ${SERVERPORT} \
    -o ControlMaster=no \
    ${CONTROLUSER}@${CONTROLSERVER} \
    "${portCmd}" \
  2>&1 )
  if [ -z $portalias ]; then
    logIt E "Portalias not set. Connection failed or playnode not found."
    exit 1
  else
    logIt I "Portalias is ${portalias}"
    echo "${portalias}"
  fi
}


establishTunnel() {
  tester 2 $# $FUNCNAME
  # Forward $SERVICEPORT over remote $portalias, using $SERVERPORT outbound
  /usr/bin/ssh \
  -q \
  -p ${SERVERPORT} \
  -o ServerAliveCountMax=2 \
  -o ServerAliveInterval=45 \
  -o ControlMaster=no \
  -o ExitOnForwardFailure=yes \
  -N \
  -R ${portalias}:localhost:${SERVICEPORT} \
  ${CONTROLUSER}@${CONTROLSERVER} & \
  echo $! > "${pidFile}"
}


establishProxy() {
    tester 1 $# $FUNCNAME
    local pidFile=$1
    logIt I "establishProxy ${SERVICENAME}."
    /usr/bin/ssh \
    -q \
    -p ${SERVERPORT} \
    -o StrictHostKeyChecking=no \
    -o ServerAliveCountMax=2 \
    -o ControlMaster=no \
    -o ExitOnForwardFailure=yes \
    -o TCPKeepAlive=yes \
    -o ServerAliveInterval=45 \
    -N \
    -D ${SERVICEPORT} \
    ${CONTROLUSER}@${CONTROLSERVER} & \
    echo $! > ${pidFile} &
}


showHelp() {
  cat << EOF

Usage: [OPTION] PLAYNODE SERVICENAME SERVICEPORT SERVER

-h
  Print this usage text.
-u 
  User account on server. Default=paradigm.
-p
  Server listening port. Default=22.
-X 
  Proxy mode.

A playnode is a name to define a group of service ports, usually the hostname.
User account on remote server with shell access required.
Server side flatfile is named portalias-SERVICENAME.
Entries are formatted one playnode per line like this: dummy^32767
Where dummy is the playnode name, and 32767 is the server local port
A server-side script registers new playnodes to new ports in this file.

Examples: 
  paradigm PlaynodeName Shell 22 control.server.com
  paradigm -u user -p 443 -l /var/lib/paradigm/log.paradigm PlaynodeName MPD 6600 control.server.com

EOF
}

tester() {
  if [ $2 -lt $1 ]; then
    logIt E "$3 did not receive enough arguments."
    exit 1
  fi
}

# This is the first stuff that runs.
# http://stackoverflow.com/a/14203146
OPTIND=1
PROXYMODE=0
while getopts "hl:u:p:X" opt; do
  case "$opt" in
  h)
    showHelp
    exit 0
    ;;
  l)  
    readonly LOGFILE="$OPTARG"
    ;;
  u)  
    readonly CONTROLUSER="$OPTARG"
    ;;
  p)  
    readonly SERVERPORT=$OPTARG
    ;;
  X)  
    readonly PROXYMODE=1
    ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift
# from http://stackoverflow.com/a/13864829/5045643
[ -z ${CONTROLUSER+x} ] && readonly CONTROLUSER="paradigm"
[ -z ${SERVERPORT+x} ] && readonly SERVERPORT=22
[ -z ${LOGFILE+x} ] && readonly LOGFILE="$HOME/log.paradigm"

tester 4 $# BASE

readonly PLAYNODE="$1"
readonly SERVICENAME="$2"
readonly SERVICEPORT=$3
readonly CONTROLSERVER="$4"


# Call the main function once to start
main 

echo "Paradigm for ${SERVICENAME} logged to ${LOGFILE}"
exit 0

#!/bin/bash

# PARADIGM 0.2
# Checks for and
# Establishes tunnels for remote access to ssh and mpd

# Copyright 2014 Neil Scudder neil@neilscudder.com
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


readonly PROGNAME=$(basename $0)
readonly PROGDIR=$(readlink -m $(dirname $0))
readonly ARGS="$@"

if [ $# -lt 2 ]; then
    echo "Usage: `basename $0` PLAYNODE USER PASSWORD SERVER TUNNELNAME SERVICEPORT" 1>&2
    exit 1
fi

readonly PLAYNODE="$1"
# Server URL and credentials:
readonly CONTROLUSER="$2"
readonly CONTROLPASS="$3"
readonly CONTROLSERVER="$4"
readonly TUNNELNAME="$5"
readonly SERVICEPORT=$6
# Playnode needs to reach out over this port
# and the server needs to be listening on it:
# STATEFUL firewalls must open this port to $CONTROLSERVER
readonly SERVERLISTENINGPORT=42
readonly LOGFILE="/var/lib/paradigm/log.paradigm"
# TODO check for SSHPASS dependency

main() {
    tunnelCheck TUNNELNAME
}

tunnelCheck() {
    local pidFile=/tmp/paradigm-${TUNNELNAME}.pid
        if [ -f ${pidFile} ]; then
                echo "$(date) - II - Pid file found for ${TUNNELNAME}" >> $LOGFILE
                local pid=$(cat ${pidFile})
                if kill -0 $pid > /dev/null 2>&1; then
                        echo "$(date) - II - Tunnel ${pid} found running (${TUNNELNAME})." >> $LOGFILE
                else
                        echo "$(date) - EE - Tunnel ${pid} not found in process list (${TUNNELNAME})." >> $LOGFILE
                        rm ${pidFile}
                        initTunnel ${TUNNELNAME} ${pidFile}
                fi
        else
                echo "$(date) - WW - Pid file not found for ${TUNNELNAME}." >> $LOGFILE
                initTunnel ${TUNNELNAME} ${pidFile}
        fi
}

initTunnel() {
    local pidFile=$2
    echo "$(date) - II - initTunnel ${TUNNELNAME}." >> $LOGFILE
    local portCmd="cat 'portalias-${TUNNELNAME}' | grep '^${PLAYNODE}' | /usr/bin/cut -d^ -f2"
    # Query remote server for remote ports to use for forwarding
            local portalias=$(/usr/bin/sshpass \
            -p${CONTROLPASS} \
                /usr/bin/ssh \
                -q \
                -p ${SERVERLISTENINGPORT} \
                    -o StrictHostKeyChecking=no \
                    -o ControlMaster=no \
                ${CONTROLUSER}@${CONTROLSERVER} \
                "${portCmd}" \
                2>&1 )
            establishTunnel ${portalias} ${SERVICEPORT} "${pidFile}"
}

establishTunnel() {
        if [ $# -eq 3 ]; then
            local portalias="$1"
            local localPort="$2"
            local pidFile="$3"
            echo "$(date) - II - Portalias ${portalias} being used for ${PLAYNODE} ${pidFile}" >> $LOGFILE
        else
            local portalias="NOTSET"
            local localPort="$1"
            local pidFile="$2"
            echo "$(date) - EE - Number of positional params < 3. ${portalias} ${localPort} ${pidfile}" >> $LOGFILE
            # TODO Considering how serious an error this is, a failover should take effect.
            return
        fi
    
        # Forward $localPort over remote $portalias, using $SERVERLISTENINGPORT outbound
        /usr/bin/sshpass \
        -p${CONTROLPASS} \
            /usr/bin/ssh \
            -q \
            -p ${SERVERLISTENINGPORT} \
            -o StrictHostKeyChecking=no \
            -o ServerAliveCountMax=2 \
            -o ControlMaster=no \
            -o ExitOnForwardFailure=yes \
            -o TCPKeepAlive=yes \
            -o ServerAliveInterval=45 \
            -N \
            -R ${portalias}:localhost:${localPort} \
            ${CONTROLUSER}@${CONTROLSERVER} & \
            echo $! > "${pidFile}"
}

main # Call the main function once to start

exit 0

#!/bin/sh
# PARADIGM 0.6.0 Copyright 2014 neil@neilscudder.com
# GNU GPL <http://www.gnu.org/licenses/>.

main() {
  getOptions $@
  checkPid
  if [ $PROXYMODE ]; then
    establishProxy
  else      
    establishTunnel
  fi
  echo "Paradigm for ${SERVICENAME} logged to ${LOGFILE}"
}


getOptions() {
  # http://stackoverflow.com/a/14203146
  OPTIND=1
  while getopts "hl:p:tu:X" opt; do
    case "$opt" in
    h)
      showHelp
      exit 0
      ;;
    l)  
      readonly LOGFILE="$OPTARG"
      ;;
    p)  
      readonly SERVERPORT=$OPTARG
      ;;
    t)  
      readonly TESTER=1
      ;;
    u)  
      readonly CONTROLUSER="$OPTARG"
      ;;

    X)  
      readonly PROXYMODE=1
      ;;
    esac
  done
  shift $((OPTIND-1))
  [ "$1" = "--" ] && shift
  
  if [ ! $TESTER ]; then
    # from http://stackoverflow.com/a/13864829/5045643
    [ -z ${CONTROLUSER+x} ] && readonly CONTROLUSER="paradigm"
    [ -z ${SERVERPORT+x} ] && readonly SERVERPORT=22
    [ -z ${LOGFILE+x} ] && readonly LOGFILE="$HOME/log.paradigm"
    readonly PLAYNODE="$1"
    readonly SERVICENAME="$2"
    readonly SERVICEPORT=$3
    readonly CONTROLSERVER="$4"
  else
    readonly CONTROLUSER="convict"
    readonly SERVERPORT=42
    readonly LOGFILE="./log.paradigm"
    readonly PLAYNODE="dummy"
    readonly SERVICENAME="Shell"
    readonly SERVICEPORT=23
    readonly CONTROLSERVER="control"
  fi
}


checkPid() {
  logIt I "checkPid"
  local pidFile=/tmp/paradigm-${SERVICENAME}.pid
  if [ -f ${pidfile} ]; then
    local pid=$(cat ${pidFile})
    logIt I "pid file found"
  else
    logIt W "pid file not found"
  fi

  if kill -0 $pid > /dev/null 2>&1; then
    logIt I "Tunnel found running, ex(c)iting."
    exit 0
  else
    rm -f ${pidfile}
    logIt W "pid not found running"
  fi
}


argCounter() {
  correctNumber=$1; actualNumber=$2; function=$3
  if [ $actualNumber -lt $correctNumber ]; then
    error_exit "$function did not receive enough arguments."
  else
    logIt I "$function"
  fi
}

# http://linuxcommand.org/wss0150.php
error_exit() {
  logIt E "${1:-"Unknown Error"}"
  exit 1
}


logIt() {
  [ -z ${PLAYNODE+x} ] && echo "PLAYNODE not set!"
  a="$(date +"%m-%d-%y-%T") ${PLAYNODE} - ${SERVICENAME} - "
  case $1 in
    I)
      b="${a}II"
    ;;
    W)
      b="${a}WW"
    ;;
    E)
      b="${a}EE"
      echo "${b} - ${2}" >> $LOGFILE
      echo "${b} - ${2}" 1>&2
    ;;
  esac
  echo "${b} - ${2}" >> $LOGFILE
}


getPortalias() {
  logIt I "getPortalias"
  local portCmd="cat\
    'portalias-${SERVICENAME}' \
    | grep '^${PLAYNODE}' \
    | /usr/bin/cut -d^ -f2"
  local portalias=$(
    /usr/bin/ssh \
    -q \
    -p ${SERVERPORT} \
    -o ControlMaster=no \
    ${CONTROLUSER}@${CONTROLSERVER} \
    "${portCmd}" \
  2>&1 )
  if [ -z $portalias ]; then
    error_exit "Portalias not set. \
      Connection failed or playnode not found."
  else
    logIt I "Portalias is ${portalias}"
    echo "${portalias}"
  fi
}


establishTunnel() {
  logIt I "establishTunnel"
  portalias=$(getPortalias)
  local pidFile=/tmp/paradigm-${SERVICENAME}.pid
  /usr/bin/ssh \
  -p ${SERVERPORT} \
  -q \
  -o ServerAliveCountMax=2 \
  -o ServerAliveInterval=45 \
  -o ControlMaster=no \
  -o ExitOnForwardFailure=yes \
  -N \
  -R ${portalias}:localhost:${SERVICEPORT} \
  ${CONTROLUSER}@${CONTROLSERVER} & \
  echo $! > "${pidFile}"
}


establishProxy() {
  logIt I "establishProxy"
  local pidFile=/tmp/paradigm-${SERVICENAME}.pid
  /usr/bin/ssh \
  -p ${SERVERPORT} \
  -q \
  -o ServerAliveCountMax=2 \
  -o ServerAliveInterval=45 \
  -o ControlMaster=no \
  -o ExitOnForwardFailure=yes \
  -N \
  -D ${SERVICEPORT} \
  ${CONTROLUSER}@${CONTROLSERVER} & \
  echo $! > "${pidFile}" &
}


showHelp() {
  cat << EOF

Usage: [OPTION] PLAYNODE SERVICENAME SERVICEPORT SERVER

-h
  Print this usage text.
-u 
  User account on server. Default=paradigm.
-p
  Server listening port. Default=22.
-X 
  Proxy mode.

A playnode is a name to define a group of service ports,
usually the client hostname.
User account on remote server with shell access required.
Server side flatfile is named portalias-SERVICENAME.
Formatted one playnode per line like this: dummy^32767
Where dummy is the playnode name, and 32767 is the portalias.

Examples: 
  paradigm PlaynodeName Shell 22 control.server.com
  paradigm -u user -p 443 -l /var/lib/paradigm/log.paradigm \
PlaynodeName MPD 6600 control.server.com

EOF
}


# Call the first function to start
main $@
exit 0
